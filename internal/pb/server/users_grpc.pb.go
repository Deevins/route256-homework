// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: api/proto/server/users.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserServiceV1_CreateUser_FullMethodName  = "/user.v1.UserServiceV1/CreateUser"
	UserServiceV1_ListUser_FullMethodName    = "/user.v1.UserServiceV1/ListUser"
	UserServiceV1_GetUser_FullMethodName     = "/user.v1.UserServiceV1/GetUser"
	UserServiceV1_UpdateEmail_FullMethodName = "/user.v1.UserServiceV1/UpdateEmail"
	UserServiceV1_DeleteUser_FullMethodName  = "/user.v1.UserServiceV1/DeleteUser"
)

// UserServiceV1Client is the client API for UserServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceV1Client interface {
	// Create new User
	CreateUser(ctx context.Context, in *CreateUserRequestV1, opts ...grpc.CallOption) (*CreateUserResponseV1, error)
	// Get User list
	ListUser(ctx context.Context, in *ListUserRequestV1, opts ...grpc.CallOption) (*ListUserResponseV1, error)
	// Get User by ID
	GetUser(ctx context.Context, in *GetUserRequestV1, opts ...grpc.CallOption) (*GetUserResponseV1, error)
	// Update User email by ID
	UpdateEmail(ctx context.Context, in *UpdateEmailRequestV1, opts ...grpc.CallOption) (*UpdateEmailResponseV1, error)
	// Remove User by ID
	DeleteUser(ctx context.Context, in *DeleteUserRequestV1, opts ...grpc.CallOption) (*DeleteUserResponseV1, error)
}

type userServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceV1Client(cc grpc.ClientConnInterface) UserServiceV1Client {
	return &userServiceV1Client{cc}
}

func (c *userServiceV1Client) CreateUser(ctx context.Context, in *CreateUserRequestV1, opts ...grpc.CallOption) (*CreateUserResponseV1, error) {
	out := new(CreateUserResponseV1)
	err := c.cc.Invoke(ctx, UserServiceV1_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV1Client) ListUser(ctx context.Context, in *ListUserRequestV1, opts ...grpc.CallOption) (*ListUserResponseV1, error) {
	out := new(ListUserResponseV1)
	err := c.cc.Invoke(ctx, UserServiceV1_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV1Client) GetUser(ctx context.Context, in *GetUserRequestV1, opts ...grpc.CallOption) (*GetUserResponseV1, error) {
	out := new(GetUserResponseV1)
	err := c.cc.Invoke(ctx, UserServiceV1_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV1Client) UpdateEmail(ctx context.Context, in *UpdateEmailRequestV1, opts ...grpc.CallOption) (*UpdateEmailResponseV1, error) {
	out := new(UpdateEmailResponseV1)
	err := c.cc.Invoke(ctx, UserServiceV1_UpdateEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceV1Client) DeleteUser(ctx context.Context, in *DeleteUserRequestV1, opts ...grpc.CallOption) (*DeleteUserResponseV1, error) {
	out := new(DeleteUserResponseV1)
	err := c.cc.Invoke(ctx, UserServiceV1_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceV1Server is the server API for UserServiceV1 service.
// All implementations must embed UnimplementedUserServiceV1Server
// for forward compatibility
type UserServiceV1Server interface {
	// Create new User
	CreateUser(context.Context, *CreateUserRequestV1) (*CreateUserResponseV1, error)
	// Get User list
	ListUser(context.Context, *ListUserRequestV1) (*ListUserResponseV1, error)
	// Get User by ID
	GetUser(context.Context, *GetUserRequestV1) (*GetUserResponseV1, error)
	// Update User email by ID
	UpdateEmail(context.Context, *UpdateEmailRequestV1) (*UpdateEmailResponseV1, error)
	// Remove User by ID
	DeleteUser(context.Context, *DeleteUserRequestV1) (*DeleteUserResponseV1, error)
	mustEmbedUnimplementedUserServiceV1Server()
}

// UnimplementedUserServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedUserServiceV1Server struct {
}

func (UnimplementedUserServiceV1Server) CreateUser(context.Context, *CreateUserRequestV1) (*CreateUserResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceV1Server) ListUser(context.Context, *ListUserRequestV1) (*ListUserResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedUserServiceV1Server) GetUser(context.Context, *GetUserRequestV1) (*GetUserResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceV1Server) UpdateEmail(context.Context, *UpdateEmailRequestV1) (*UpdateEmailResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedUserServiceV1Server) DeleteUser(context.Context, *DeleteUserRequestV1) (*DeleteUserResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceV1Server) mustEmbedUnimplementedUserServiceV1Server() {}

// UnsafeUserServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceV1Server will
// result in compilation errors.
type UnsafeUserServiceV1Server interface {
	mustEmbedUnimplementedUserServiceV1Server()
}

func RegisterUserServiceV1Server(s grpc.ServiceRegistrar, srv UserServiceV1Server) {
	s.RegisterService(&UserServiceV1_ServiceDesc, srv)
}

func _UserServiceV1_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV1Server).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV1_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV1Server).CreateUser(ctx, req.(*CreateUserRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV1_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV1Server).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV1_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV1Server).ListUser(ctx, req.(*ListUserRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV1_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV1Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV1_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV1Server).GetUser(ctx, req.(*GetUserRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV1_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV1Server).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV1_UpdateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV1Server).UpdateEmail(ctx, req.(*UpdateEmailRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceV1_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceV1Server).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceV1_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceV1Server).DeleteUser(ctx, req.(*DeleteUserRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServiceV1_ServiceDesc is the grpc.ServiceDesc for UserServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserServiceV1",
	HandlerType: (*UserServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserServiceV1_CreateUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _UserServiceV1_ListUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserServiceV1_GetUser_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _UserServiceV1_UpdateEmail_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserServiceV1_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/server/users.proto",
}

const ()

// UserServiceV2Client is the client API for UserServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceV2Client interface {
}

type userServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceV2Client(cc grpc.ClientConnInterface) UserServiceV2Client {
	return &userServiceV2Client{cc}
}

// UserServiceV2Server is the server API for UserServiceV2 service.
// All implementations must embed UnimplementedUserServiceV2Server
// for forward compatibility
type UserServiceV2Server interface {
	mustEmbedUnimplementedUserServiceV2Server()
}

// UnimplementedUserServiceV2Server must be embedded to have forward compatible implementations.
type UnimplementedUserServiceV2Server struct {
}

func (UnimplementedUserServiceV2Server) mustEmbedUnimplementedUserServiceV2Server() {}

// UnsafeUserServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceV2Server will
// result in compilation errors.
type UnsafeUserServiceV2Server interface {
	mustEmbedUnimplementedUserServiceV2Server()
}

func RegisterUserServiceV2Server(s grpc.ServiceRegistrar, srv UserServiceV2Server) {
	s.RegisterService(&UserServiceV2_ServiceDesc, srv)
}

// UserServiceV2_ServiceDesc is the grpc.ServiceDesc for UserServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserServiceV2",
	HandlerType: (*UserServiceV2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/proto/server/users.proto",
}
